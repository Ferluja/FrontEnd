{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class CronometroComponent {\n  constructor() {\n    // se declara una variable llamada 'segundo' de tipo number en un ambito publico y se inicializa en 0\n    this.segundo = 0;\n    // se declara una entrada en un ambito publico llamada 'inicio' de tipo number y se inicializa en 0\n    this.inicio = 0;\n    // se declara una salida en un ambito publico llamada 'multiplo10' se instancia apartir de EventEmitter \n    this.multiplo10 = new EventEmitter();\n  }\n  // En este metodo, se inicializa la variable segundo con el valor de inicio\n  ngOnInit() {\n    this.segundo = this.inicio;\n    // se llama al mmtodo setInterval para que se ejecute el método actualizarSegundo() cada segundo\n    setInterval(this.actualizarSegundo.bind(this), 1000);\n  }\n  // en este metodo se ejecuta cada segundo y aumenta la variable de segundo en uno\n  actualizarSegundo() {\n    this.segundo++;\n    // Si el valor de segundo es un múltiplo de 10 \n    if (this.segundo % 10 === 0) {\n      //se emite un evento utilizando el método emititMultiplo10()\n      this.emititMultiplo10();\n    }\n  }\n  // este metodo emite un evento utilizando la salida multiplo10\n  emititMultiplo10() {\n    //se emite el valor actual del segundo\n    this.multiplo10.emit(this.segundo);\n  }\n}\nCronometroComponent.ɵfac = function CronometroComponent_Factory(t) {\n  return new (t || CronometroComponent)();\n};\nCronometroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CronometroComponent,\n  selectors: [[\"app-cronometro\"]],\n  inputs: {\n    inicio: \"inicio\"\n  },\n  outputs: {\n    multiplo10: \"multiplo10\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"cronometro\"]],\n  template: function CronometroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.segundo, \" Seg.\\n\");\n    }\n  },\n  styles: [\".cronometro[_ngcontent-%COMP%]{\\r\\n    \\r\\n    width: 8rem;\\r\\n    \\r\\n    height: 3rem;\\r\\n    \\r\\n    font-size: 2rem;\\r\\n    \\r\\n    color: white;\\r\\n    \\r\\n    background-color: black;\\r\\n    \\r\\n    border-radius: 10px;\\r\\n    \\r\\n    display: inline-flex;\\r\\n    \\r\\n    justify-content: center;\\r\\n    \\r\\n    align-items: center;\\r\\n    \\r\\n    margin: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3Jvbm9tZXRyby9jcm9ub21ldHJvLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxZQUFZO0lBQ1osb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLHFEQUFxRDtJQUNyRCx1QkFBdUI7SUFDdkIscUNBQXFDO0lBQ3JDLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osWUFBWTtBQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIi5jcm9ub21ldHJve1xyXG4gICAgLyogYW5jaG8gKi9cclxuICAgIHdpZHRoOiA4cmVtO1xyXG4gICAgLyogYWx0dXJhICovXHJcbiAgICBoZWlnaHQ6IDNyZW07XHJcbiAgICAvKiB0YW1hw4PCsW8gZGUgbGV0cmEgKi9cclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIC8qIGNvbG9yIGRlIGxldHJhICovXHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAvKiBjb2xvciBkZSBmb25kbyAqL1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICAvKiByZWRvbmRlYSBib3JkZXMgKi9cclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAvKiBlbGVtZW50byBmbGV4aWJsZSAqL1xyXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XHJcbiAgICAvKiBhbGluZWFjacODwrNuIGhvcml6b250YWwgZGVsIGNvbnRlbmlkbyBlbiBlbCBjZW50cm8gKi9cclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgLyogYWxpbmVhY2nDg8KzbiB2ZXJ0aWNhbCBlbiBlbCBjZW50cm8gKi9cclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAvKiBtYXJnZW4gICovXHJcbiAgICBtYXJnaW46IDEwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAA+B,eAAe;;AAO9E,OAAM,MAAOC,mBAAmB;EALhCC;IAOE;IACO,YAAO,GAAY,CAAC;IAC3B;IACgB,WAAM,GAAY,CAAC;IAEnC;IACiB,eAAU,GAAG,IAAIF,YAAY,EAAE;;EAEhD;EACAG,QAAQ;IACN,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,MAAM;IACxB;IACFC,WAAW,CAAC,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;EACtD;EAEA;EACQD,iBAAiB;IACvB,IAAI,CAACH,OAAO,EAAE;IACd;IACA,IAAI,IAAI,CAACA,OAAO,GAAG,EAAE,KAAK,CAAC,EAAE;MACzB;MACF,IAAI,CAACK,gBAAgB,EAAE;;EAE3B;EACA;EACQA,gBAAgB;IACtB;IACA,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAACP,OAAO,CAAC;EACpC;;AA9BWH,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAW;EAAAC;IAAAR;EAAA;EAAAS;IAAAJ;EAAA;EAAAK;EAAAC;EAAAC;EAAAC;IAAA;MCNhCC,8BAAwB;MAGpBA,YACJ;MAAAA,iBAAM;;;MADFA,eACJ;MADIA,kDACJ","names":["EventEmitter","CronometroComponent","constructor","ngOnInit","segundo","inicio","setInterval","actualizarSegundo","bind","emititMultiplo10","multiplo10","emit","selectors","inputs","outputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\projects\\yoosva\\cronometroPractica\\src\\app\\cronometro\\cronometro.component.ts","C:\\xampp\\htdocs\\projects\\yoosva\\cronometroPractica\\src\\app\\cronometro\\cronometro.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-cronometro',\r\n  templateUrl: './cronometro.component.html',\r\n  styleUrls: ['./cronometro.component.css']\r\n})\r\nexport class CronometroComponent implements OnInit{\r\n\r\n  // se declara una variable llamada 'segundo' de tipo number en un ambito publico y se inicializa en 0\r\n  public segundo : number = 0;\r\n  // se declara una entrada en un ambito publico llamada 'inicio' de tipo number y se inicializa en 0\r\n  @Input() public inicio : number = 0;\r\n\r\n  // se declara una salida en un ambito publico llamada 'multiplo10' se instancia apartir de EventEmitter \r\n  @Output() public multiplo10 = new EventEmitter();\r\n\r\n  // En este metodo, se inicializa la variable segundo con el valor de inicio\r\n  ngOnInit(): void{\r\n    this.segundo = this.inicio;\r\n      // se llama al mmtodo setInterval para que se ejecute el método actualizarSegundo() cada segundo\r\n    setInterval(this.actualizarSegundo.bind(this), 1000);\r\n  }\r\n\r\n  // en este metodo se ejecuta cada segundo y aumenta la variable de segundo en uno\r\n  private actualizarSegundo(): void{\r\n    this.segundo++;\r\n    // Si el valor de segundo es un múltiplo de 10 \r\n    if (this.segundo % 10 === 0) {\r\n        //se emite un evento utilizando el método emititMultiplo10()\r\n      this.emititMultiplo10();\r\n    }\r\n  }\r\n  // este metodo emite un evento utilizando la salida multiplo10\r\n  private emititMultiplo10(): void{\r\n    //se emite el valor actual del segundo\r\n    this.multiplo10.emit(this.segundo);\r\n  }\r\n\r\n}\r\n","<!-- se agrega una clase CSS llamada cromometro al div -->\r\n<div class=\"cronometro\">\r\n    <!-- se muestra el valor actual del tiempo del cronómetro en segundos, que se guarda en la variable\r\n    llamada segundo -->\r\n    {{segundo}} Seg.\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}